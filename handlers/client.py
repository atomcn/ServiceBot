import logging
from aiogram import types, Dispatcher
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters import Text # –î–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–Ω–æ–ø–æ–∫ "–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å"

from states.client_states import ClientForm
from keyboards.inline import get_service_keyboard, get_photo_choice_keyboard, service_cb, photo_action_cb
from utils.google_sheets import add_new_request
from utils.notify import notify_masters, notify_admin_new_request
from config import AVAILABLE_SERVICES # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Å–ª–æ–≤–∞—Ä—å —É—Å–ª—É–≥

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏–π –∫–ª–∏–µ–Ω—Ç–∞ ---

async def process_service_choice(callback_query: types.CallbackQuery, callback_data: dict, state: FSMContext):
    """–õ–æ–≤–∏—Ç –≤—ã–±–æ—Ä —É—Å–ª—É–≥–∏"""
    service_id = callback_data.get("id")
    service_name = callback_data.get("name")

    await state.update_data(service_id=service_id)
    await state.update_data(service_type_name=service_name) # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏ —á–∏—Ç–∞–µ–º–æ–µ –∏–º—è

    await callback_query.message.edit_text(f"–í—ã –≤—ã–±—Ä–∞–ª–∏: *{service_name}*\n\n"
                                           f"–¢–µ–ø–µ—Ä—å, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–ø–∏—à–∏—Ç–µ –≤–∞—à—É –ø—Ä–æ–±–ª–µ–º—É –∏–ª–∏ –∑–∞–¥–∞—á—É –∫–∞–∫ –º–æ–∂–Ω–æ –ø–æ–¥—Ä–æ–±–Ω–µ–µ.",
                                           parse_mode='Markdown')
    await ClientForm.entering_description.set()
    await callback_query.answer() # –£–±–∏—Ä–∞–µ–º —á–∞—Å–∏–∫–∏

async def process_description(message: types.Message, state: FSMContext):
    """–õ–æ–≤–∏—Ç –æ–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º—ã"""
    if not message.text or len(message.text.strip()) < 5:
         await message.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –±–æ–ª–µ–µ –ø–æ–¥—Ä–æ–±–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ (–º–∏–Ω–∏–º—É–º 5 —Å–∏–º–≤–æ–ª–æ–≤).")
         return

    await state.update_data(description=message.text.strip())
    await message.answer("–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç—å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –ø—Ä–æ–±–ª–µ–º—ã (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ) –∏–ª–∏ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å —ç—Ç–æ—Ç —à–∞–≥.",
                         reply_markup=get_photo_choice_keyboard())
    await ClientForm.uploading_photo.set() # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è —Ñ–æ—Ç–æ –∏–ª–∏ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏

async def process_photo(message: types.Message, state: FSMContext):
    """–õ–æ–≤–∏—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–µ —Ñ–æ—Ç–æ"""
    if not message.photo:
        await message.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å —Ñ–æ—Ç–æ'.")
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º file_id —Å–∞–º–æ–≥–æ –±–æ–ª—å—à–æ–≥–æ —Ñ–æ—Ç–æ
    photo_id = message.photo[-1].file_id
    await state.update_data(photo_id=photo_id)
    await message.answer("–§–æ—Ç–æ –ø–æ–ª—É—á–µ–Ω–æ!")
    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É (–Ω–∞–ø—Ä–∏–º–µ—Ä, –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
    # await ClientForm.entering_quantity.set()
    # await message.answer("–£–∫–∞–∂–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –∫—Ä–∞–Ω–æ–≤, —Ä–æ–∑–µ—Ç–æ–∫), –µ—Å–ª–∏ –ø—Ä–∏–º–µ–Ω–∏–º–æ, –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ '1', –µ—Å–ª–∏ –Ω–µ –≤–∞–∂–Ω–æ:")
    # ---- –ï–°–õ–ò –í–û–ü–†–û–° –û –ö–û–õ–ò–ß–ï–°–¢–í–ï –ù–ï –ù–£–ñ–ï–ù, –ü–ï–†–ï–•–û–î–ò–ú –°–†–ê–ó–£ –ö –î–ê–¢–ï: ----
    await ClientForm.entering_date.set()
    await message.answer("–ö–æ–≥–¥–∞ –≤–∞–º —É–¥–æ–±–Ω–æ, —á—Ç–æ–±—ã –º–∞—Å—Ç–µ—Ä –ø—Ä–∏–µ—Ö–∞–ª? (–ù–∞–ø–∏—à–∏—Ç–µ –¥–∞—Ç—É, –Ω–∞–ø—Ä–∏–º–µ—Ä, '–ó–∞–≤—Ç—Ä–∞', '25.12', '–í –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è')")


async def process_skip_photo(callback_query: types.CallbackQuery, state: FSMContext):
    """–õ–æ–≤–∏—Ç –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å —Ñ–æ—Ç–æ'"""
    await state.update_data(photo_id="") # –Ø–≤–Ω–æ —É–∫–∞–∑—ã–≤–∞–µ–º, —á—Ç–æ —Ñ–æ—Ç–æ –Ω–µ—Ç
    await callback_query.message.edit_text("–§–æ—Ç–æ –ø—Ä–æ–ø—É—â–µ–Ω–æ.")
    await callback_query.answer()
    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É (–Ω–∞–ø—Ä–∏–º–µ—Ä, –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ)
    # await ClientForm.entering_quantity.set()
    # await callback_query.message.answer("–£–∫–∞–∂–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –∫—Ä–∞–Ω–æ–≤, —Ä–æ–∑–µ—Ç–æ–∫), –µ—Å–ª–∏ –ø—Ä–∏–º–µ–Ω–∏–º–æ, –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ '1', –µ—Å–ª–∏ –Ω–µ –≤–∞–∂–Ω–æ:")
    # ---- –ï–°–õ–ò –í–û–ü–†–û–° –û –ö–û–õ–ò–ß–ï–°–¢–í–ï –ù–ï –ù–£–ñ–ï–ù, –ü–ï–†–ï–•–û–î–ò–ú –°–†–ê–ó–£ –ö –î–ê–¢–ï: ----
    await ClientForm.entering_date.set()
    await callback_query.message.answer("–ö–æ–≥–¥–∞ –≤–∞–º —É–¥–æ–±–Ω–æ, —á—Ç–æ–±—ã –º–∞—Å—Ç–µ—Ä –ø—Ä–∏–µ—Ö–∞–ª? (–ù–∞–ø–∏—à–∏—Ç–µ –¥–∞—Ç—É, –Ω–∞–ø—Ä–∏–º–µ—Ä, '–ó–∞–≤—Ç—Ä–∞', '25.12', '–í –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è')")


# --- –ü—Ä–∏–º–µ—Ä –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –¥–æ–ø. –≤–æ–ø—Ä–æ—Å–∞ (–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ) ---
# async def process_quantity(message: types.Message, state: FSMContext):
#     """–õ–æ–≤–∏—Ç –≤–≤–æ–¥ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞"""
#     # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –≤–∞–ª–∏–¥–∞—Ü–∏—é, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä, —á—Ç–æ —ç—Ç–æ —á–∏—Å–ª–æ)
#     await state.update_data(quantity=message.text.strip())
#     await ClientForm.entering_date.set()
#     await message.answer("–ö–æ–≥–¥–∞ –≤–∞–º —É–¥–æ–±–Ω–æ, —á—Ç–æ–±—ã –º–∞—Å—Ç–µ—Ä –ø—Ä–∏–µ—Ö–∞–ª? (–ù–∞–ø–∏—à–∏—Ç–µ –¥–∞—Ç—É, –Ω–∞–ø—Ä–∏–º–µ—Ä, '–ó–∞–≤—Ç—Ä–∞', '25.12', '–í –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è')")


async def process_date(message: types.Message, state: FSMContext):
    """–õ–æ–≤–∏—Ç –≤–≤–æ–¥ –¥–∞—Ç—ã"""
    await state.update_data(date=message.text.strip())
    await ClientForm.entering_time.set()
    await message.answer("–£–∫–∞–∂–∏—Ç–µ —É–¥–æ–±–Ω–æ–µ –≤—Ä–µ–º—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, '14:00', '–£—Ç—Ä–æ', '–í —Ç–µ—á–µ–Ω–∏–µ –¥–Ω—è')")

async def process_time(message: types.Message, state: FSMContext):
    """–õ–æ–≤–∏—Ç –≤–≤–æ–¥ –≤—Ä–µ–º–µ–Ω–∏"""
    await state.update_data(time=message.text.strip())
    await ClientForm.entering_address.set()
    await message.answer("–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –∞–¥—Ä–µ—Å (—É–ª–∏—Ü–∞, –¥–æ–º, –∫–≤–∞—Ä—Ç–∏—Ä–∞).")

async def process_address(message: types.Message, state: FSMContext):
    """–õ–æ–≤–∏—Ç –≤–≤–æ–¥ –∞–¥—Ä–µ—Å–∞ –∏ –∑–∞–≤–µ—Ä—à–∞–µ—Ç —Å–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö"""
    if not message.text or len(message.text.strip()) < 5:
         await message.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –±–æ–ª–µ–µ –ø–æ–ª–Ω—ã–π –∞–¥—Ä–µ—Å.")
         return

    await state.update_data(address=message.text.strip())
    user_data = await state.get_data()

    # –°–æ–±–∏—Ä–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ, –Ω–æ –ø–æ–ª–µ–∑–Ω–æ)
    # service_name = AVAILABLE_SERVICES.get(user_data.get('service_id'), '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è —É—Å–ª—É–≥–∞')
    service_name = user_data.get('service_type_name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è —É—Å–ª—É–≥–∞') # –ë–µ—Ä–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–µ –∏–º—è

    # --- –°—á–∏—Ç–∞–µ–º –æ—Ä–∏–µ–Ω—Ç–∏—Ä–æ–≤–æ—á–Ω—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å (–ü–†–ò–ú–ï–†) ---
    # –õ–æ–≥–∏–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ –º–æ–∂–µ—Ç –±—ã—Ç—å —Å–ª–æ–∂–Ω–µ–µ, –∑–∞–≤–∏—Å–µ—Ç—å –æ—Ç —É—Å–ª—É–≥–∏, –∫–æ–ª-–≤–∞ –∏ —Ç.–¥.
    estimated_cost = "–æ—Ç 500 —Ä—É–±." # –ü—Ä–∏–º–µ—Ä
    if user_data.get('service_id') == 'electrician':
        estimated_cost = "–æ—Ç 800 —Ä—É–±."
    elif user_data.get('service_id') == 'handyman':
        estimated_cost = "–æ—Ç 600 —Ä—É–±./—á–∞—Å"
    await state.update_data(estimated_cost=estimated_cost) # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–ª—è –∑–∞–ø–∏—Å–∏ –≤ —Ç–∞–±–ª–∏—Ü—É
    # --- –ö–æ–Ω–µ—Ü –ø—Ä–∏–º–µ—Ä–∞ —Ä–∞—Å—á–µ—Ç–∞ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ ---


    confirmation_text = (
        f"‚úÖ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –ø–æ—á—Ç–∏ –≥–æ—Ç–æ–≤–∞:\n\n"
        f"–£—Å–ª—É–≥–∞: *{service_name}*\n"
        f"–û–ø–∏—Å–∞–Ω–∏–µ: {user_data.get('description', '-')}\n"
        # f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {user_data.get('quantity', '-')}\n" # –ï—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è
        f"–ñ–µ–ª–∞–µ–º–∞—è –¥–∞—Ç–∞: {user_data.get('date', '-')}\n"
        f"–ñ–µ–ª–∞–µ–º–æ–µ –≤—Ä–µ–º—è: {user_data.get('time', '-')}\n"
        f"–ê–¥—Ä–µ—Å: {user_data.get('address', '-')}\n"
        f"–§–æ—Ç–æ: {'–ü—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–æ' if user_data.get('photo_id') else '–ù–µ—Ç'}\n\n"
        f"–û—Ä–∏–µ–Ω—Ç–∏—Ä–æ–≤–æ—á–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: *{estimated_cost}*\n\n"
        f"–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞—è–≤–∫—É –º–∞—Å—Ç–µ—Ä–∞–º?"
    )
    # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –∫–Ω–æ–ø–∫–∏ –î–∞/–ù–µ—Ç –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π
    # await ClientForm.confirming_request.set()
    # await message.answer(confirmation_text, reply_markup=get_confirmation_keyboard(), parse_mode='Markdown')

    # --- –°—Ä–∞–∑—É –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞—è–≤–∫—É ---
    await message.answer("‚è≥ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤–∞—à—É –∑–∞—è–≤–∫—É –º–∞—Å—Ç–µ—Ä–∞–º...")

    # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞—è–≤–∫—É –≤ Google Sheets
    request_id, error_msg = await add_new_request(user_data)

    if request_id and not error_msg:
        await message.answer(f"üëç –í–∞—à–∞ –∑–∞—è–≤–∫–∞ ID `{request_id}` –ø—Ä–∏–Ω—è—Ç–∞! –ú–∞—Å—Ç–µ—Ä–∞ —Å–∫–æ—Ä–æ –ø–æ–ª—É—á–∞—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ. "
                             f"–ú—ã —Å–æ–æ–±—â–∏–º –≤–∞–º, –∫–æ–≥–¥–∞ –º–∞—Å—Ç–µ—Ä –≤–æ–∑—å–º–µ—Ç –∑–∞—è–≤–∫—É –≤ —Ä–∞–±–æ—Ç—É.", parse_mode='Markdown')

        # –£–≤–µ–¥–æ–º–ª—è–µ–º –º–∞—Å—Ç–µ—Ä–æ–≤ –∏ –∞–¥–º–∏–Ω–∞
        await notify_masters(message.bot, request_id, user_data)
        await notify_admin_new_request(message.bot, request_id, user_data)

    else:
        await message.answer(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞—è–≤–∫–∏. {error_msg or ''} –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π.")
        logging.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞—è–≤–∫–∏ –¥–ª—è {user_data.get('client_id')}: {error_msg}")

    # –ó–∞–≤–µ—Ä—à–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ FSM
    await state.finish()


# --- –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Ö—ç–Ω–¥–ª–µ—Ä–æ–≤ ---
def register_handlers_client(dp: Dispatcher):
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —É—Å–ª—É–≥–∏ (callback)
    dp.register_callback_query_handler(process_service_choice, service_cb.filter(), state=ClientForm.choosing_service)

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –æ–ø–∏—Å–∞–Ω–∏—è
    dp.register_message_handler(process_description, state=ClientForm.entering_description)

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ –∏–ª–∏ –ø—Ä–æ–ø—É—Å–∫–∞ —Ñ–æ—Ç–æ
    dp.register_message_handler(process_photo, content_types=types.ContentType.PHOTO, state=ClientForm.uploading_photo)
    dp.register_callback_query_handler(process_skip_photo, photo_action_cb.filter(action="skip"), state=ClientForm.uploading_photo)
    # –ó–∞—â–∏—Ç–∞ –æ—Ç –Ω–µ–≤–µ—Ä–Ω–æ–≥–æ –≤–≤–æ–¥–∞ –Ω–∞ —ç—Ç–∞–ø–µ —Ñ–æ—Ç–æ
    dp.register_message_handler(lambda message: message.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å —Ñ–æ—Ç–æ'."),
                                content_types=types.ContentType.ANY,
                                state=ClientForm.uploading_photo)

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ (–µ—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è)
    # dp.register_message_handler(process_quantity, state=ClientForm.entering_quantity)

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –¥–∞—Ç—ã
    dp.register_message_handler(process_date, state=ClientForm.entering_date)

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –≤—Ä–µ–º–µ–Ω–∏
    dp.register_message_handler(process_time, state=ClientForm.entering_time)

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –∞–¥—Ä–µ—Å–∞ (—Ñ–∏–Ω–∞–ª—å–Ω—ã–π —à–∞–≥)
    dp.register_message_handler(process_address, state=ClientForm.entering_address)

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞", –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –Ω–µ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ FSM
    # dp.register_message_handler(lambda message: asyncio.run(cmd_start(message, FSMContext(dp.storage, message.chat.id, message.from_user.id))), Text(equals="–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞", ignore_case=True), state=None)