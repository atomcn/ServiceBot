import logging
from aiogram import types, Dispatcher
from aiogram.dispatcher.filters import Command, ChatTypeFilter
from aiogram.utils.exceptions import ChatNotFound, BotBlocked, UserDeactivated

from config import ADMIN_ID, MASTER_IDS
from utils.google_sheets import get_all_requests_data
from decimal import Decimal, InvalidOperation # –ò—Å–ø–æ–ª—å–∑—É–µ–º Decimal –¥–ª—è —Ç–æ—á–Ω—ã—Ö —Ä–∞—Å—á–µ—Ç–æ–≤ —Å –¥–µ–Ω—å–≥–∞–º–∏

# --- –ö–æ–º–∞–Ω–¥—ã –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ ---

async def cmd_requests(message: types.Message):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–µ N –∑–∞—è–≤–æ–∫"""
    # --- –ò–ó–ú–ï–ù–ï–ù–ò–ï –ó–î–ï–°–¨ ---
    # –§–∏–ª—å—Ç—Ä –≤ register_handlers_admin —É–∂–µ –¥–æ–ª–∂–µ–Ω –æ—Ç—Å–µ—á—å –Ω–µ-–∞–¥–º–∏–Ω–æ–≤,
    # –Ω–æ —ç—Ç–∞ –ø—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∫ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∑–∞—â–∏—Ç–∞ —Ç–µ–ø–µ—Ä—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –Ω–∞ –ù–ï–†–ê–í–ï–ù–°–¢–í–û
    if message.from_user.id != ADMIN_ID: # –ë—ã–ª–æ: if message.from_user.id not in ADMIN_ID:
        # –≠—Ç–∞ —Å—Ç—Ä–æ–∫–∞ –≤ –∏–¥–µ–∞–ª–µ –Ω–∏–∫–æ–≥–¥–∞ –Ω–µ –¥–æ–ª–∂–Ω–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç—å—Å—è –∏–∑-–∑–∞ —Ñ–∏–ª—å—Ç—Ä–∞ user_id=ADMIN_ID
        logging.warning(f"–ü–æ–ø—ã—Ç–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ /requests –æ—Ç user {message.from_user.id}, –Ω–µ —è–≤–ª—è—é—â–µ–≥–æ—Å—è –∞–¥–º–∏–Ω–æ–º {ADMIN_ID}")
        return await message.reply("–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
    try:
        all_requests = await get_all_requests_data()
        if not all_requests:
            await message.answer("–ó–∞—è–≤–æ–∫ –ø–æ–∫–∞ –Ω–µ—Ç.")
            return

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 –∑–∞—è–≤–æ–∫ –¥–ª—è –∫—Ä–∞—Ç–∫–æ—Å—Ç–∏
        num_to_show = 10
        recent_requests = all_requests[-num_to_show:]
        recent_requests.reverse() # –ü–æ–∫–∞–∑–∞—Ç—å —Å–∞–º—ã–µ –Ω–æ–≤—ã–µ –ø–µ—Ä–≤—ã–º–∏

        response = f"üìã –ü–æ—Å–ª–µ–¥–Ω–∏–µ {len(recent_requests)} –∑–∞—è–≤–æ–∫:\n\n"
        for req in recent_requests:
            # –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏–π —Å –ø–æ–º–æ—â—å—é .get()
            req_id = req.get('Request ID', 'N/A')
            status = req.get('Status', 'N/A')
            service = req.get('Service Type', 'N/A')
            client = req.get('Client Username', f"ID: {req.get('Client ID', 'N/A')}")
            master = req.get('Master Username', '-')
            created_at = req.get('Timestamp Created', 'N/A') # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ –¥–∞—Ç–∞ —É–∂–µ –≤ –Ω—É–∂–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ

            response += (
                f"üÜî `{req_id}` | –°—Ç–∞—Ç—É—Å: *{status}*\n"
                f"üë§ –ö–ª–∏–µ–Ω—Ç: @{client}\n"
                f"üõ† –£—Å–ª—É–≥–∞: {service}\n"
                f"üë∑ –ú–∞—Å—Ç–µ—Ä: @{master}\n"
                f"üìÖ –°–æ–∑–¥–∞–Ω–∞: {created_at}\n"
                f"--------------------\n"
            )

        if len(response) > 4096: # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ Telegram
             response = response[:4090] + "\n(...)"

        await message.answer(response, parse_mode='Markdown')

    except Exception as e:
        logging.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –∑–∞—è–≤–æ–∫ –¥–ª—è –∞–¥–º–∏–Ω–∞:")
        await message.answer(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")

async def cmd_stats(message: types.Message):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –¥–æ—Ö–æ–¥–∞–º –∏ –∫–æ–º–∏—Å—Å–∏–∏"""
    if message.from_user.id != ADMIN_ID: # –ë—ã–ª–æ: if message.from_user.id not in ADMIN_ID:
        logging.warning(f"–ü–æ–ø—ã—Ç–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ /stats –æ—Ç user {message.from_user.id}, –Ω–µ —è–≤–ª—è—é—â–µ–≥–æ—Å—è –∞–¥–º–∏–Ω–æ–º {ADMIN_ID}")
        return await message.reply("–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")

    try:
        all_requests = await get_all_requests_data()
        if not all_requests:
            await message.answer("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.")
            return

        total_revenue = Decimal('0.0')
        total_commission = Decimal('0.0')
        completed_count = 0

        for req in all_requests:
            if req.get('Status') == 'Completed':
                try:
                    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å—É–º–º—ã, –∑–∞–ø–∏—Å–∞–Ω–Ω—ã–µ —Å –∑–∞–ø—è—Ç–æ–π –∏–ª–∏ —Ç–æ—á–∫–æ–π
                    amount_str = str(req.get('Amount Received', '0')).replace(',', '.')
                    commission_str = str(req.get('Service Commission', '0')).replace(',', '.')

                    amount = Decimal(amount_str) if amount_str else Decimal('0.0')
                    commission = Decimal(commission_str) if commission_str else Decimal('0.0')

                    total_revenue += amount
                    total_commission += commission
                    completed_count += 1
                except InvalidOperation:
                    logging.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —Å—É–º–º—É/–∫–æ–º–∏—Å—Å–∏—é –¥–ª—è –∑–∞—è–≤–∫–∏ {req.get('Request ID')}: "
                                    f"Amount='{req.get('Amount Received', '')}', Commission='{req.get('Service Commission', '')}'")
                except Exception as e:
                     logging.warning(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–ª—è –∑–∞—è–≤–∫–∏ {req.get('Request ID')}: {e}")


        response = (
            f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–º –∑–∞—è–≤–∫–∞–º ({completed_count} —à—Ç.):\n\n"
            f"üí∞ –û–±—â–∞—è —Å—É–º–º–∞, –ø–æ–ª—É—á–µ–Ω–Ω–∞—è –æ—Ç –∫–ª–∏–µ–Ω—Ç–æ–≤: *{total_revenue:.2f}*\n"
            f"üí∏ –û–±—â–∞—è –∫–æ–º–∏—Å—Å–∏—è —Å–µ—Ä–≤–∏—Å–∞: *{total_commission:.2f}*"
        )
        await message.answer(response, parse_mode='Markdown')

    except Exception as e:
        logging.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—á–µ—Ç–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–ª—è –∞–¥–º–∏–Ω–∞:")
        await message.answer(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—á–µ—Ç–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")


async def cmd_masters(message: types.Message):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –º–∞—Å—Ç–µ—Ä–æ–≤."""
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∞–¥–º–∏–Ω–∞ (–¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è, —Ç.–∫. –µ—Å—Ç—å —Ñ–∏–ª—å—Ç—Ä)
    if message.from_user.id != ADMIN_ID:
        logging.warning(f"–ü–æ–ø—ã—Ç–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ /masters –æ—Ç user {message.from_user.id}, –Ω–µ —è–≤–ª—è—é—â–µ–≥–æ—Å—è –∞–¥–º–∏–Ω–æ–º {ADMIN_ID}")
        return await message.reply("–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")

    if not MASTER_IDS:
        await message.answer("‚ÑπÔ∏è –°–ø–∏—Å–æ–∫ –º–∞—Å—Ç–µ—Ä–æ–≤ –ø—É—Å—Ç. –î–æ–±–∞–≤—å—Ç–µ ID –º–∞—Å—Ç–µ—Ä–æ–≤ –≤ —Ñ–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ (.env) –∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞.")
        return

    response_lines = ["üë∑ –°–ø–∏—Å–æ–∫ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –º–∞—Å—Ç–µ—Ä–æ–≤:\n"]
    bot = message.bot # –ü–æ–ª—É—á–∞–µ–º –æ–±—ä–µ–∫—Ç –±–æ—Ç–∞ –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ

    for master_id in MASTER_IDS:
        user_info_str = f"ID: `{master_id}`"
        try:
            # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ (–º–æ–∂–µ—Ç –Ω–µ —Å—Ä–∞–±–æ—Ç–∞—Ç—å –∏–∑-–∑–∞ –ø—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç–∏)
            chat = await bot.get_chat(master_id)
            username = f"@{chat.username}" if chat.username else ""
            full_name = chat.full_name
            user_info_str = f"- {full_name} ({username}) [ID: `{master_id}`](tg://user?id={master_id})"

        except (ChatNotFound, BotBlocked, UserDeactivated):
            user_info_str = f"- ID: `{master_id}` (–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–º—è/—é–∑–µ—Ä–Ω–µ–π–º - –≤–æ–∑–º–æ–∂–Ω–æ, –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω –∏–ª–∏ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞)"
        except Exception as e:
            user_info_str = f"- ID: `{master_id}` (–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö: {e})"
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –º–∞—Å—Ç–µ—Ä–∞ {master_id}: {e}")

        response_lines.append(user_info_str)

    response = "\n".join(response_lines)
    # –û—Ç–∫–ª—é—á–∞–µ–º –ø—Ä–µ–≤—å—é –¥–ª—è —Å—Å—ã–ª–æ–∫ tg://user?id=...
    await message.answer(response, parse_mode='Markdown', disable_web_page_preview=True)

# --- –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Ö—ç–Ω–¥–ª–µ—Ä–æ–≤ ---
def register_handlers_admin(dp: Dispatcher):
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—ã —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –≤ –ª–∏—á–Ω—ã—Ö —á–∞—Ç–∞—Ö
    dp.register_message_handler(cmd_requests, Command("requests"), ChatTypeFilter(types.ChatType.PRIVATE), user_id=ADMIN_ID)
    dp.register_message_handler(cmd_stats, Command("stats"), ChatTypeFilter(types.ChatType.PRIVATE), user_id=ADMIN_ID)
    dp.register_message_handler(cmd_masters, Command("masters"), ChatTypeFilter(types.ChatType.PRIVATE), user_id=ADMIN_ID)

    # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è callback'–æ–≤ –æ—Ç –∞–¥–º–∏–Ω—Å–∫–∏—Ö –∫–ª–∞–≤–∏–∞—Ç—É—Ä, –µ—Å–ª–∏ –æ–Ω–∏ –±—É–¥—É—Ç
    # dp.register_callback_query_handler(process_admin_action, admin_action_cb.filter(), user_id=ADMIN_IDS)