import logging
from aiogram import Bot
from aiogram.utils.exceptions import BotBlocked, ChatNotFound, UserDeactivated, TelegramAPIError
from config import MASTER_IDS, ADMIN_ID, SERVICE_COMMISSION_PERCENT
from keyboards.inline import get_master_new_request_keyboard, get_admin_master_report_keyboard, get_master_complete_request_keyboard

async def notify_masters(bot: Bot, request_id: str, request_data: dict):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–æ–≤–æ–π –∑–∞—è–≤–∫–µ –≤—Å–µ–º –º–∞—Å—Ç–µ—Ä–∞–º."""
    service_name = request_data.get('service_type_name', '–ù–µ —É–∫–∞–∑–∞–Ω')
    description = request_data.get('description', '–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è')
    address = request_data.get('address', '–ù–µ —É–∫–∞–∑–∞–Ω')
    photo_id = request_data.get('photo_id')

    text = (
        f"üîî –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞! ID: `{request_id}`\n\n"
        f"–£—Å–ª—É–≥–∞: *{service_name}*\n"
        f"–û–ø–∏—Å–∞–Ω–∏–µ: {description}\n"
        f"–ê–¥—Ä–µ—Å: {address}\n"
        # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –¥–∞—Ç—É/–≤—Ä–µ–º—è, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
    )
    keyboard = get_master_new_request_keyboard(request_id)

    for master_id in MASTER_IDS:
        try:
            if photo_id:
                 await bot.send_photo(master_id, photo_id, caption=text, reply_markup=keyboard, parse_mode='Markdown')
            else:
                 await bot.send_message(master_id, text, reply_markup=keyboard, parse_mode='Markdown')
            logging.info(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞—è–≤–∫–µ {request_id} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –º–∞—Å—Ç–µ—Ä—É {master_id}")
        except (BotBlocked, ChatNotFound, UserDeactivated):
            logging.warning(f"–ú–∞—Å—Ç–µ—Ä {master_id} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞ –∏–ª–∏ —á–∞—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        except TelegramAPIError as e:
            logging.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –º–∞—Å—Ç–µ—Ä—É {master_id}: {e}")
        except Exception as e:
            logging.error(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –º–∞—Å—Ç–µ—Ä—É {master_id}: {e}")

async def notify_admin_new_request(bot: Bot, request_id: str, request_data: dict):
    """–£–≤–µ–¥–æ–º–ª—è–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –æ –Ω–æ–≤–æ–π –∑–∞—è–≤–∫–µ (—Å –∫–Ω–æ–ø–∫–æ–π '–ü—Ä–∏–Ω—è—Ç—å')"""
    client_username = request_data.get('client_username', 'N/A')
    client_id = request_data.get('client_id', 'N/A')
    service_name = request_data.get('service_type_name', '–ù–µ —É–∫–∞–∑–∞–Ω')
    text = (
        f"üìù –°–æ–∑–¥–∞–Ω–∞ –Ω–æ–≤–∞—è –∑–∞—è–≤–∫–∞ ID: `{request_id}`\n"
        f"–ö–ª–∏–µ–Ω—Ç: @{client_username} (ID: {client_id})\n"
        f"–£—Å–ª—É–≥–∞: {service_name}\n"
        f"[–û—Ç–∫—Ä—ã—Ç—å —á–∞—Ç —Å –∫–ª–∏–µ–Ω—Ç–æ–º](tg://user?id={client_id})"
    )

    keyboard = get_master_new_request_keyboard(request_id)

    try:
        await bot.send_message(ADMIN_ID, text, reply_markup=keyboard, parse_mode='Markdown', disable_web_page_preview=True)
        logging.info(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–æ–≤–æ–π –∑–∞—è–≤–∫–µ {request_id} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–¥–º–∏–Ω—É {ADMIN_ID}")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω—É {ADMIN_ID} –æ –Ω–æ–≤–æ–π –∑–∞—è–≤–∫–µ: {e}")

async def notify_client_request_accepted(bot: Bot, client_id: int, request_id: str, master_username: str):
    """–£–≤–µ–¥–æ–º–ª—è–µ—Ç –∫–ª–∏–µ–Ω—Ç–∞, —á—Ç–æ –µ–≥–æ –∑–∞—è–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞."""
    text = (
        f"‚úÖ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ ID `{request_id}` –ø—Ä–∏–Ω—è—Ç–∞!\n"
        f"–ú–∞—Å—Ç–µ—Ä @{master_username} —Å–∫–æ—Ä–æ —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –∏–ª–∏ –ø—Ä–∏–µ–¥–µ—Ç –≤ –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è."
    )
    try:
        await bot.send_message(client_id, text, parse_mode='Markdown')
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç—É {client_id} –æ –ø—Ä–∏–Ω—è—Ç–∏–∏ –∑–∞—è–≤–∫–∏: {e}")

async def notify_admin_request_accepted(bot: Bot, request_id: str, master_username: str, master_id: int):
     """–£–≤–µ–¥–æ–º–ª—è–µ—Ç –∞–¥–º–∏–Ω–∞, —á—Ç–æ –∑–∞—è–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞ –º–∞—Å—Ç–µ—Ä–æ–º."""
     text = (
         f"üìå –ó–∞—è–≤–∫–∞ ID `{request_id}` –ø—Ä–∏–Ω—è—Ç–∞ –º–∞—Å—Ç–µ—Ä–æ–º @{master_username} (ID: {master_id})."
         # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Å—Å—ã–ª–∫—É –Ω–∞ —á–∞—Ç —Å –º–∞—Å—Ç–µ—Ä–æ–º: tg://user?id={master_id}
     )

     keyboard = get_master_complete_request_keyboard(request_id)

     try:
         await bot.send_message(ADMIN_ID, text, reply_markup=keyboard, parse_mode='Markdown', disable_web_page_preview=True)
         logging.info(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø—Ä–∏–Ω—è—Ç–∏–∏ –∑–∞—è–≤–∫–∏ {request_id} –º–∞—Å—Ç–µ—Ä–æ–º {master_id} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–¥–º–∏–Ω—É {ADMIN_ID}")
     except Exception as e:
         logging.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω—É {ADMIN_ID} –æ –ø—Ä–∏–Ω—è—Ç–∏–∏ –∑–∞—è–≤–∫–∏: {e}")


async def notify_admin_master_report(bot: Bot, request_id: str, master_username: str, master_id: int, amount: float, commission: float, feedback: str):
    """–£–≤–µ–¥–æ–º–ª—è–µ—Ç –∞–¥–º–∏–Ω–∞ –æ–± –æ—Ç—á–µ—Ç–µ –º–∞—Å—Ç–µ—Ä–∞."""
    text = (
        f"üí∞ –û—Ç—á–µ—Ç –ø–æ –∑–∞—è–≤–∫–µ ID `{request_id}` –æ—Ç –º–∞—Å—Ç–µ—Ä–∞ @{master_username} (ID: {master_id})\n\n"
        f"–ü–æ–ª—É—á–µ–Ω–æ –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞: *{amount:.2f}*\n"
        f"–ö–æ–º–∏—Å—Å–∏—è —Å–µ—Ä–≤–∏—Å–∞ ({SERVICE_COMMISSION_PERCENT}%): *{commission:.2f}*\n"
        f"–û—Ç–∑—ã–≤ –º–∞—Å—Ç–µ—Ä–∞: {feedback if feedback else '–ù–µ—Ç –æ—Ç–∑—ã–≤–∞'}"
    )
    keyboard = get_admin_master_report_keyboard(request_id, master_id) # –î–æ–±–∞–≤–∏–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è —Å–≤—è–∑–∏
    try:
        await bot.send_message(ADMIN_ID, text, reply_markup=keyboard, parse_mode='Markdown')
        logging.info(f"–û—Ç—á–µ—Ç –ø–æ –∑–∞—è–≤–∫–µ {request_id} –æ—Ç –º–∞—Å—Ç–µ—Ä–∞ {master_id} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∞–¥–º–∏–Ω—É {ADMIN_ID}")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç—á–µ—Ç–∞ –∞–¥–º–∏–Ω—É {ADMIN_ID}: {e}")

async def notify_client_request_completed(bot: Bot, client_id: int, request_id: str):
    """–£–≤–µ–¥–æ–º–ª—è–µ—Ç –∫–ª–∏–µ–Ω—Ç–∞ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Ä–∞–±–æ—Ç—ã (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)."""
    text = (
        f"üèÅ –†–∞–±–æ—Ç–∞ –ø–æ –≤–∞—à–µ–π –∑–∞—è–≤–∫–µ ID `{request_id}` –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –º–∞—Å—Ç–µ—Ä–æ–º.\n"
        f"–°–ø–∞—Å–∏–±–æ, —á—Ç–æ –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏—Å—å –Ω–∞—à–∏–º —Å–µ—Ä–≤–∏—Å–æ–º!"
        # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ—Å—å–±—É –æ—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤ –±–æ—Ç—É –∏–ª–∏ —Å—Å—ã–ª–∫—É –Ω–∞ —Ñ–æ—Ä–º—É –æ—Ç–∑—ã–≤–∞
    )
    try:
        await bot.send_message(client_id, text, parse_mode='Markdown')
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç—É {client_id} –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏: {e}")