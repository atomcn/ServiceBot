import logging
import asyncio

from aiogram import Bot, Dispatcher, types
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.utils import executor

from config import BOT_TOKEN
from utils.google_sheets import init_gspread # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
from handlers.common import register_handlers_common
from handlers.client import register_handlers_client
from handlers.master import register_handlers_master
from handlers.admin import register_handlers_admin

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')

async def on_startup(dp: Dispatcher):
    """–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ –±–æ—Ç–∞"""
    logging.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
    try:
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º Google Sheets –æ–¥–∏–Ω —Ä–∞–∑ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
        init_gspread()
        logging.info("Google Sheets –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω.")
    except Exception as e:
        logging.critical(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å Google Sheets –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ: {e}")
        # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ —Ä–µ—à–∏—Ç—å, –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—Ç—å –ª–∏ –±–æ—Ç–∞, –µ—Å–ª–∏ —Ç–∞–±–ª–∏—Ü—ã –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã
        # raise

    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Ö—ç–Ω–¥–ª–µ—Ä–æ–≤
    register_handlers_common(dp)
    register_handlers_client(dp)
    register_handlers_master(dp)
    register_handlers_admin(dp)
    logging.info("–•—ç–Ω–¥–ª–µ—Ä—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã.")
    # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–æ–º–∞–Ω–¥ –º–µ–Ω—é (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
    await set_commands(dp.bot)
    logging.info("–ö–æ–º–∞–Ω–¥—ã —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã.")


async def set_commands(bot: Bot):
    """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–æ–º–∞–Ω–¥ –≤ –º–µ–Ω—é Telegram"""
    commands = [
        types.BotCommand(command="/start", description="üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç—å/–ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞"),
        types.BotCommand(command="/help", description="‚ùì –ü–æ–º–æ—â—å"),
        # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è —Ä–æ–ª–µ–π, –Ω–æ –æ–Ω–∏ –±—É–¥—É—Ç –≤–∏–¥–Ω—ã –≤—Å–µ–º
        # types.BotCommand(command="/new_request", description="üìù –°–æ–∑–¥–∞—Ç—å –∑–∞—è–≤–∫—É (–ö–ª–∏–µ–Ω—Ç)"),
        # types.BotCommand(command="/requests", description="üìã –ü—Ä–æ—Å–º–æ—Ç—Ä –∑–∞—è–≤–æ–∫ (–ê–¥–º–∏–Ω)"),
        # types.BotCommand(command="/stats", description="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ (–ê–¥–º–∏–Ω)"),
    ]
    try:
        await bot.set_my_commands(commands)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∫–æ–º–∞–Ω–¥: {e}")


def main():
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —Ç–æ–∫–µ–Ω–∞ –ø–µ—Ä–µ–¥ —Å–æ–∑–¥–∞–Ω–∏–µ–º –±–æ—Ç–∞
    if not BOT_TOKEN:
        logging.critical("–¢–æ–∫–µ–Ω –±–æ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –æ–Ω —É–∫–∞–∑–∞–Ω –≤ .env —Ñ–∞–π–ª–µ.")
        return # –ù–µ –∑–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞ –±–µ–∑ —Ç–æ–∫–µ–Ω–∞

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
    bot = Bot(token=BOT_TOKEN)
    storage = MemoryStorage() # –•—Ä–∞–Ω–∏–ª–∏—â–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π –≤ –ø–∞–º—è—Ç–∏ (–¥–ª—è –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞ –ª—É—á—à–µ RedisStorage)
    dp = Dispatcher(bot, storage=storage)

    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    executor.start_polling(dp, skip_updates=True, on_startup=on_startup)

if __name__ == '__main__':
    main()